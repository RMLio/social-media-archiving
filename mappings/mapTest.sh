#
# author: Sven Lieber (Sven.Lieber@ugent.be)
# Ghent University - imec - IDLab
#
# Ad-hoc script to quickly test some of the mappings and construct queries.
# Twitter JSON Data including warc headers as produced by the message-queue-mapper
# should be available in the folder test/resources.

#
# Filenames of the files which will be generated from the SFM database
#
HARVEST_SEEDS="test/harvest-seeds.ttl"
COLLECTION_METADATA="test/collection-metadata.ttl"
COLLECTION_VERSIONS="test/collection-versions.ttl"

#
# Filenames of the files which will be generated from provided test data in test/resources
#
STATUS_OBJECT_TWEETS="test/status-object-tweets.ttl"
STATUS_OBJECT_REQUESTS="test/status-object-requests.ttl"
TIMELINE_OBJECT_TWEETS="test/timeline-object-tweets.ttl"
TIMELINE_OBJECT_REQUESTS="test/timeline-object-requests.ttl"

#
# Filenames of the files which will be generated by SPARQL queries
#
COLLECTION_ITEM_LINKS="test/collection-item-links.nt"
ITEM_NAMED_ENTITIES="test/item-named-entities.nt"
HASHTAG_MEASUREMENTS="test/hashtag-measurements.nt"
POSTS_MEASUREMENTS="test/posts-measurements.nt"

generate_collections() {
  #
  # Generate RDF from the database
  #
  echo "Generate harvests and seeds ..."
  bash map.sh collection-harvest-seeds.yml $HARVEST_SEEDS
  echo "Generate collection metadata ..."
  bash map.sh collection-metadata.yml $COLLECTION_METADATA
  echo "Generate collection versions ..."
  bash map.sh collection-versioning-harvest.yml $COLLECTION_VERSIONS
}

generate_items() {
  #
  # Generate RDF from harvested files
  #
  echo "Generate status objects ..."
  cp test/resources/status-objects.json message.json
  bash map.sh json-twitter-warc-mapping.yml $STATUS_OBJECT_TWEETS

  echo "Generate status objects' requests ..."
  cp test/resources/status-objects-request.json message.json
  bash map.sh json-twitter-warc-mapping.yml $STATUS_OBJECT_REQUESTS

  echo "Generate timeline objects ..."
  cp test/resources/timeline-objects.json message.json
  bash map.sh json-twitter-warc-mapping.yml $TIMELINE_OBJECT_TWEETS

  echo "Generate timeline objects' requests ..."
  cp test/resources/timeline-objects-request.json message.json
  bash map.sh json-twitter-warc-mapping.yml $TIMELINE_OBJECT_REQUESTS
}

construct_item_links() {
  #
  # Generate RDF from existing RDF via SPARQL
  #
  echo "Create collection item links ..."
  comunica-sparql-file \
    $HARVEST_SEEDS \
    $COLLECTION_METADATA \
    $COLLECTION_VERSIONS \
    $STATUS_OBJECT_TWEETS \
    $STATUS_OBJECT_REQUESTS \
    $TIMELINE_OBJECT_TWEETS \
    $TIMELINE_OBJECT_REQUESTS \
    -f construct-item-collection-links.sparql > $COLLECTION_ITEM_LINKS

}

construct_ne() {

  echo "Create named entities structure according to sioc ..."
  comunica-sparql-file \
    $HARVEST_SEEDS \
    $COLLECTION_METADATA \
    $COLLECTION_VERSIONS \
    $COLLECTION_ITEM_LINKS \
    $STATUS_OBJECT_TWEETS \
    $STATUS_OBJECT_REQUESTS \
    $TIMELINE_OBJECT_TWEETS \
    $TIMELINE_OBJECT_REQUESTS \
    -f construct-named-entities.sparql > $ITEM_NAMED_ENTITIES

}

measure_hashtags() {

  echo "Create hashtag measurements ..."
  comunica-sparql-file \
    $HARVEST_SEEDS \
    $COLLECTION_METADATA \
    $COLLECTION_VERSIONS \
    $COLLECTION_ITEM_LINKS \
    $STATUS_OBJECT_TWEETS \
    $STATUS_OBJECT_REQUESTS \
    $TIMELINE_OBJECT_TWEETS \
    $TIMELINE_OBJECT_REQUESTS \
    -f construct-hashtag-measurements.sparql > $HASHTAG_MEASUREMENTS
}

measure_posts() {

  echo "Create posts measurements ..."
  comunica-sparql-file \
    $HARVEST_SEEDS \
    $COLLECTION_METADATA \
    $COLLECTION_VERSIONS \
    $COLLECTION_ITEM_LINKS \
    $STATUS_OBJECT_TWEETS \
    $STATUS_OBJECT_REQUESTS \
    $TIMELINE_OBJECT_TWEETS \
    $TIMELINE_OBJECT_REQUESTS \
    -f construct-timeline-measurements.sparql > $POSTS_MEASUREMENTS
}

if [ $# -ne 1 ];
then
  echo "Please provide one of the following commands 'generate-collections', 'generate-items', 'generate-all', 'aggregate-links', 'aggregate-ne', 'aggregate-all', 'measure-posts', 'measure-hashtags', 'measure' or 'all'"
  exit 1
fi

if [ $1 = 'generate-all' ];
then
  generate_collections
  generate_items
elif [ $1 = 'generate-collections' ];
then
  generate_collections
elif [ $1 = 'generate-items' ];
then
  generate_items
elif [ $1 = 'aggregate' ];
then
  construct_item_links
  construct_ne
elif [ $1 = 'measure' ];
then
  measure_hashtags
  measure_posts
elif [ $1 = 'measure-hashtags' ];
then
  measure_hashtags
elif [ $1 = 'measure-posts' ];
then
  measure_posts
elif [ $1 = 'all' ];
then
  generate_collections
  generate_items
  construct_item_links
  construct_ne
  measure_hashtags 
else
  echo "Unknown command"
  echo "Please provide one of the following commands 'generate-collections', 'generate-items', 'generate-all', 'aggregate-links', 'aggregate-ne', 'aggregate-all', 'measure-posts', 'measure-hashtags', 'measure' or 'all'"
  exit 1
fi
